### set log levels ###
log4j.rootLogger = DEBUG, stdout,D

### 放开安全系统在日志级别为调试，上生产时需要改成ERROR级别
log4j.logger.org.springframework.security = debug

### 错误码转义信息日志文件#######
log4j.logger.com.nantian.mfp.framework.handler.BusinessExceptionResolver = INFO,tips,D
### 流控信息日志文件#######
log4j.logger.com.nantian.mfp.framework.flowctrl.FlowctrlFilter = INFO,flowctrl,D

log4j.logger.org.apache.http.impl.client.CloseableHttpClient = ERROR


### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =[%-d{yyyyMMdd HHmmss}][%p][%X{reqFlowNo}][%X{txcode}][%F:%M:%L]%m%n

### 输出到日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = logs/hnm.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern =[%-d{yyyyMMdd HHmmss}][%p][%X{reqFlowNo}][%X{txcode}][%F:%M:%L]%m%n

### 输出流错误码转义信息到日志文件 ###
log4j.appender.tips = org.apache.log4j.DailyRollingFileAppender
log4j.appender.tips.File =logs/tips.log
log4j.appender.tips.Append = true
log4j.appender.tips.Threshold = INFO
log4j.appender.tips.layout = org.apache.log4j.PatternLayout
log4j.appender.tips.layout.ConversionPattern =[%-d{yyyyMMdd HHmmss}][%p][%X{reqFlowNo}][%X{txcode}][%F:%M:%L]%m%n

### 输出流控信息到日志文件 ###
log4j.appender.flowctrl = org.apache.log4j.DailyRollingFileAppender
log4j.appender.flowctrl.File = logs/flowctrl.log
log4j.appender.flowctrl.Append = true
log4j.appender.flowctrl.Threshold = INFO
log4j.appender.flowctrl.layout = org.apache.log4j.PatternLayout
log4j.appender.flowctrl.layout.ConversionPattern =[%-d{yyyyMMdd HHmmss}][%p][%X{reqFlowNo}][%X{txcode}][%F:%M:%L]%m%n

# 如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，具体参数：
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 　 %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个”%”字符
# %F: 输出日志消息产生时所在的文件名称
# %M: 输出执行方法
# %L: 输出代码中的行号
